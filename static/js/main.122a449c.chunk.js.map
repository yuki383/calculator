{"version":3,"sources":["components/Board/Buttons/Button.js","components/Board/Buttons.js","components/Board/Display.js","components/Board.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","className","onClick","this","props","expr","React","Component","Buttons","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isReset","display","s","updated","updateState","undefined","op","calculate","setState","parseFloat","updateDisplay","calc","startsWith","substring","indexOf","Buttons_Button","handleClick","bind","renderButton","isClear","Display","value","Board","result","disp","arguments","length","b","toString","Board_Display","Board_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","components_Board","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.122a449c.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <div className=\"button\" onClick={this.props.onClick}>{this.props.expr}</div>\n    );\n  }\n}\n\nexport default Button;","import React from \"react\";\nimport Button from \"./Buttons/Button\"\n\nclass Buttons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isReset: true,\n    };\n  }\n\n  isClear() {\n    return (this.props.display === \"0\") ? \"AC\" : \"C\";\n  }\n\n  updateDisplay(s) {\n    const updated = this.props.display + s;\n    this.props.updateState(undefined, updated, undefined)\n  }\n\n  calc(op) {\n    this.props.calculate(op);\n    this.setState({ isReset: true });\n  }\n\n  handleClick(expr) {\n    if (parseFloat(expr) || expr === \"0\") {\n      if (this.state.isReset) {\n        this.props.updateState(undefined, expr, undefined);\n        this.setState({ isReset: false })\n      } else {\n        this.updateDisplay(expr);\n      }\n\n    } else {\n      switch (expr) {\n        case \"+\":\n        case \"-\":\n        case \"×\":\n        case \"÷\":\n        case \"%\":\n          if (!this.state.isReset) {\n            this.calc(expr);\n          }\n          break;\n        case \"=\":\n          this.props.calculate(expr);\n          break;\n        case \"+/-\":\n          if (!(this.props.display === \"0\")) {\n            const updated = this.props.display.startsWith(\"-\") ?\n              this.props.display.substring(1) : \"-\" + this.props.display;\n            this.props.updateState(undefined, updated, undefined);\n          }\n          break;\n        case \".\":\n          if (this.props.display.indexOf(\".\") === -1) {\n            this.updateDisplay(expr);\n          }\n          break;\n        case \"AC\":\n          this.props.updateState(0, \"0\", null);\n          this.setState({isReset: true});\n          break;\n        default: \n          this.props.updateState(undefined, \"0\", undefined);\n          this.setState({isReset: true});\n          break;\n\n      }\n    }\n  }\n\n  renderButton(s) {\n    return (\n      <Button\n        expr={s}\n        onClick={this.handleClick.bind(this, s)}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"buttons-row\" >\n          {this.renderButton(this.isClear())}\n          {this.renderButton(\"+/-\")}\n          {this.renderButton(\"%\")}\n          {this.renderButton(\"÷\")}\n        </div>\n        <div className=\"buttons-row\" >\n          {this.renderButton(\"7\")}\n          {this.renderButton(\"8\")}\n          {this.renderButton(\"9\")}\n          {this.renderButton(\"×\")}\n        </div>\n        <div className=\"buttons-row\" >\n          {this.renderButton(\"4\")}\n          {this.renderButton(\"5\")}\n          {this.renderButton(\"6\")}\n          {this.renderButton(\"-\")}\n        </div>\n        <div className=\"buttons-row\" >\n          {this.renderButton(\"1\")}\n          {this.renderButton(\"2\")}\n          {this.renderButton(\"3\")}\n          {this.renderButton(\"+\")}\n        </div>\n        <div className=\"buttons-row\" >\n          <div className=\"button\"></div>\n          {this.renderButton(\"0\")}\n          {this.renderButton(\".\")}\n          {this.renderButton(\"=\")}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Buttons;","import React from \"react\";\n\nclass Display extends React.Component {\n  render() {\n    return (\n      <div>{this.props.value}</div>\n    );\n  }\n}\n\nexport default Display;","import React from \"react\";\nimport Buttons from \"./Board/Buttons\";\nimport Display from \"./Board/Display\";\nimport '../App.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: 0,\n      disp: \"0\",\n      op: null,\n    };\n  }\n\n  updateState(result = this.state.result, disp = this.state.disp, op = this.state.op) {\n    this.setState({\n      result: result,\n      disp: disp,\n      op: op,\n    });\n  }\n\n  calculate(op) {\n    const result = func(this.state.op)(this.state.result, parseFloat(this.state.disp));\n    this.updateState(result, result.toString(), op);\n  }\n\n  render() {\n    return (\n      <div>\n        <Display value={this.state.disp}/>\n        <Buttons \n          display={this.state.disp} \n          result={this.state.result}\n          updateState={this.updateState.bind(this)}\n          calculate={this.calculate.bind(this)}\n\n        />\n      </div>\n    );\n  }\n}\n\nfunction func(expr) {\n  if (expr === \"+\") {\n    return ((a, b) => { return a + b });\n  } else if (expr === \"-\") {\n    return ((a, b) => { return a - b });\n  } else if (expr === \"×\") {\n    return ((a, b) => { return a * b });\n  } else if (expr === \"÷\") {\n    return ((a, b) => { return a / b });\n  } else if (expr === \"%\") {\n    return ((a, b) => { return a % b });\n  } else {\n    return ((a, b) => { return b });\n  }\n}\n\nexport default Board;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from \"./components/Board\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}